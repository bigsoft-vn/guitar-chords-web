{"ast":null,"code":"// Use relative URL when frontend and backend are on same domain\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '/api';\nclass ApiService {\n  async request(endpoint, options) {\n    const url = `${API_BASE_URL}${endpoint}`;\n    try {\n      const response = await fetch(url, {\n        headers: {\n          'Content-Type': 'application/json',\n          ...(options === null || options === void 0 ? void 0 : options.headers)\n        },\n        ...options\n      });\n      if (!response.ok) {\n        const errorText = await response.text().catch(() => 'Unknown error');\n        throw new Error(`API Error: ${response.status} ${response.statusText} - ${errorText}`);\n      }\n      const data = await response.json();\n      if (data === null || data === undefined) {\n        throw new Error('API returned null or undefined data');\n      }\n      return data;\n    } catch (error) {\n      console.error(`API request failed for ${endpoint}:`, error);\n\n      // Return empty data for common endpoints to prevent app crashes\n      if (endpoint.includes('/songs/recent')) {\n        return [];\n      }\n      if (endpoint.includes('/chords') && endpoint.split('/').length === 2) {\n        return [];\n      }\n      if (endpoint.includes('/search')) {\n        return [];\n      }\n      throw error;\n    }\n  }\n\n  // Songs\n  async getRecentSongs(limit = 5) {\n    return this.request(`/songs/recent?limit=${limit}`);\n  }\n  async getSongById(id) {\n    return this.request(`/songs/${id}`);\n  }\n  async getAllSongs(page = 1, limit = 10, filters) {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      limit: limit.toString()\n    });\n    if (filters !== null && filters !== void 0 && filters.genre) params.append('genre', filters.genre);\n    if (filters !== null && filters !== void 0 && filters.difficulty) params.append('difficulty', filters.difficulty);\n    if (filters !== null && filters !== void 0 && filters.artistId) params.append('artistId', filters.artistId.toString());\n    return this.request(`/songs?${params.toString()}`);\n  }\n\n  // Chords\n  async getAllChords(difficulty) {\n    const params = difficulty ? `?difficulty=${difficulty}` : '';\n    return this.request(`/chords${params}`);\n  }\n  async getChordByName(name) {\n    return this.request(`/chords/${encodeURIComponent(name)}`);\n  }\n  async getSongsWithChord(chordName, limit = 10) {\n    return this.request(`/chords/${encodeURIComponent(chordName)}/songs?limit=${limit}`);\n  }\n\n  // Artists\n  async getAllArtists(page = 1, limit = 20) {\n    return this.request(`/artists?page=${page}&limit=${limit}`);\n  }\n  async getArtistById(id) {\n    return this.request(`/artists/${id}`);\n  }\n\n  // Search\n  async search(query, type) {\n    const params = new URLSearchParams({\n      q: query\n    });\n    if (type) params.append('type', type);\n    return this.request(`/search?${params.toString()}`);\n  }\n  async getPopularSearches() {\n    return this.request('/search/popular');\n  }\n\n  // Health check\n  async healthCheck() {\n    const response = await fetch(`${API_BASE_URL.replace('/api', '')}/health`);\n    return response.json();\n  }\n}\nexport const apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","request","endpoint","options","url","response","fetch","headers","ok","errorText","text","catch","Error","status","statusText","data","json","undefined","error","console","includes","split","length","getRecentSongs","limit","getSongById","id","getAllSongs","page","filters","params","URLSearchParams","toString","genre","append","difficulty","artistId","getAllChords","getChordByName","name","encodeURIComponent","getSongsWithChord","chordName","getAllArtists","getArtistById","search","query","type","q","getPopularSearches","healthCheck","replace","apiService"],"sources":["/Users/chungtran/Programming/guitar-chords/web/src/services/api.ts"],"sourcesContent":["// Use relative URL when frontend and backend are on same domain\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '/api';\n\nexport interface Song {\n  id: number;\n  title: string;\n  artist: {\n    id: number;\n    name: string;\n  };\n  lyrics: string;\n  tempo: number;\n  genre?: string;\n  difficulty: string;\n  chordProgression?: string;\n  key?: string;\n  capo?: number;\n  strummingPattern?: string;\n  duration?: number;\n  playCount: number;\n  chords: Array<{\n    id: number;\n    name: string;\n    positions: number[];\n    fingers: number[];\n    difficulty: string;\n    position: number;\n    line: number;\n  }>;\n}\n\nexport interface Chord {\n  id: number;\n  name: string;\n  positions: number[];\n  fingers: number[];\n  description?: string;\n  difficulty: string;\n  tips: string[];\n}\n\nexport interface SearchResult {\n  type: 'song' | 'chord' | 'artist';\n  id: number;\n  title: string;\n  artist?: string;\n  matchPercentage: number;\n  chords?: string[];\n}\n\nclass ApiService {\n  private async request<T>(endpoint: string, options?: RequestInit): Promise<T> {\n    const url = `${API_BASE_URL}${endpoint}`;\n    \n    try {\n      const response = await fetch(url, {\n        headers: {\n          'Content-Type': 'application/json',\n          ...options?.headers,\n        },\n        ...options,\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text().catch(() => 'Unknown error');\n        throw new Error(`API Error: ${response.status} ${response.statusText} - ${errorText}`);\n      }\n\n      const data = await response.json();\n      if (data === null || data === undefined) {\n        throw new Error('API returned null or undefined data');\n      }\n\n      return data;\n    } catch (error) {\n      console.error(`API request failed for ${endpoint}:`, error);\n      \n      // Return empty data for common endpoints to prevent app crashes\n      if (endpoint.includes('/songs/recent')) {\n        return [] as unknown as T;\n      }\n      if (endpoint.includes('/chords') && endpoint.split('/').length === 2) {\n        return [] as unknown as T;\n      }\n      if (endpoint.includes('/search')) {\n        return [] as unknown as T;\n      }\n      \n      throw error;\n    }\n  }\n\n  // Songs\n  async getRecentSongs(limit = 5): Promise<Song[]> {\n    return this.request(`/songs/recent?limit=${limit}`);\n  }\n\n  async getSongById(id: string): Promise<Song> {\n    return this.request(`/songs/${id}`);\n  }\n\n  async getAllSongs(page = 1, limit = 10, filters?: {\n    genre?: string;\n    difficulty?: string;\n    artistId?: number;\n  }): Promise<{\n    songs: Song[];\n    pagination: {\n      page: number;\n      limit: number;\n      total: number;\n      pages: number;\n    };\n  }> {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      limit: limit.toString(),\n    });\n\n    if (filters?.genre) params.append('genre', filters.genre);\n    if (filters?.difficulty) params.append('difficulty', filters.difficulty);\n    if (filters?.artistId) params.append('artistId', filters.artistId.toString());\n\n    return this.request(`/songs?${params.toString()}`);\n  }\n\n  // Chords\n  async getAllChords(difficulty?: string): Promise<Chord[]> {\n    const params = difficulty ? `?difficulty=${difficulty}` : '';\n    return this.request(`/chords${params}`);\n  }\n\n  async getChordByName(name: string): Promise<Chord> {\n    return this.request(`/chords/${encodeURIComponent(name)}`);\n  }\n\n  async getSongsWithChord(chordName: string, limit = 10): Promise<Array<{\n    id: number;\n    title: string;\n    artist: string;\n    difficulty: string;\n    playCount: number;\n  }>> {\n    return this.request(`/chords/${encodeURIComponent(chordName)}/songs?limit=${limit}`);\n  }\n\n  // Artists\n  async getAllArtists(page = 1, limit = 20): Promise<{\n    artists: Array<{\n      id: number;\n      name: string;\n      bio?: string;\n      imageUrl?: string;\n      songCount: number;\n    }>;\n    pagination: {\n      page: number;\n      limit: number;\n      total: number;\n      pages: number;\n    };\n  }> {\n    return this.request(`/artists?page=${page}&limit=${limit}`);\n  }\n\n  async getArtistById(id: number): Promise<{\n    id: number;\n    name: string;\n    bio?: string;\n    imageUrl?: string;\n    songs: Array<{\n      id: number;\n      title: string;\n      difficulty: string;\n      genre?: string;\n      playCount: number;\n      chords: string[];\n    }>;\n  }> {\n    return this.request(`/artists/${id}`);\n  }\n\n  // Search\n  async search(query: string, type?: 'song' | 'chord' | 'artist'): Promise<SearchResult[]> {\n    const params = new URLSearchParams({ q: query });\n    if (type) params.append('type', type);\n    \n    return this.request(`/search?${params.toString()}`);\n  }\n\n  async getPopularSearches(): Promise<{\n    popularSongs: Array<{\n      type: 'song';\n      id: number;\n      title: string;\n      artist: string;\n      playCount: number;\n      chords: string[];\n    }>;\n    popularChords: Array<{\n      type: 'chord';\n      id: number;\n      name: string;\n      difficulty: string;\n      usageCount: number;\n    }>;\n  }> {\n    return this.request('/search/popular');\n  }\n\n  // Health check\n  async healthCheck(): Promise<{ status: string; timestamp: string }> {\n    const response = await fetch(`${API_BASE_URL.replace('/api', '')}/health`);\n    return response.json();\n  }\n}\n\nexport const apiService = new ApiService();\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}