{"ast":null,"code":"// Use relative URL when frontend and backend are on same domain\nconst API_BASE_URL=process.env.REACT_APP_API_URL||'/api';class ApiService{async request(endpoint,options){const url=`${API_BASE_URL}${endpoint}`;try{const response=await fetch(url,{headers:{'Content-Type':'application/json',...(options===null||options===void 0?void 0:options.headers)},...options});if(!response.ok){const errorText=await response.text().catch(()=>'Unknown error');throw new Error(`API Error: ${response.status} ${response.statusText} - ${errorText}`);}const data=await response.json();if(data===null||data===undefined){throw new Error('API returned null or undefined data');}return data;}catch(error){console.error(`API request failed for ${endpoint}:`,error);// Return empty data for common endpoints to prevent app crashes\nif(endpoint.includes('/songs/recent')){return[];}if(endpoint.includes('/chords')&&endpoint.split('/').length===2){return[];}if(endpoint.includes('/search')){return[];}throw error;}}// Songs\nasync getRecentSongs(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:5;return this.request(`/songs/recent?limit=${limit}`);}async getSongById(id){return this.request(`/songs/${id}`);}async getAllSongs(){let page=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;let filters=arguments.length>2?arguments[2]:undefined;const params=new URLSearchParams({page:page.toString(),limit:limit.toString()});if(filters!==null&&filters!==void 0&&filters.genre)params.append('genre',filters.genre);if(filters!==null&&filters!==void 0&&filters.difficulty)params.append('difficulty',filters.difficulty);if(filters!==null&&filters!==void 0&&filters.artistId)params.append('artistId',filters.artistId.toString());return this.request(`/songs?${params.toString()}`);}// Chords\nasync getAllChords(difficulty){const params=difficulty?`?difficulty=${difficulty}`:'';return this.request(`/chords${params}`);}async getChordByName(name){return this.request(`/chords/${encodeURIComponent(name)}`);}async getSongsWithChord(chordName){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;return this.request(`/chords/${encodeURIComponent(chordName)}/songs?limit=${limit}`);}// Artists\nasync getAllArtists(){let page=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:20;return this.request(`/artists?page=${page}&limit=${limit}`);}async getArtistById(id){return this.request(`/artists/${id}`);}// Search\nasync search(query,type){const params=new URLSearchParams({q:query});if(type)params.append('type',type);return this.request(`/search?${params.toString()}`);}async getPopularSearches(){return this.request('/search/popular');}// Health check\nasync healthCheck(){const response=await fetch(`${API_BASE_URL.replace('/api','')}/health`);return response.json();}}export const apiService=new ApiService();export default apiService;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","request","endpoint","options","url","response","fetch","headers","ok","errorText","text","catch","Error","status","statusText","data","json","undefined","error","console","includes","split","length","getRecentSongs","limit","arguments","getSongById","id","getAllSongs","page","filters","params","URLSearchParams","toString","genre","append","difficulty","artistId","getAllChords","getChordByName","name","encodeURIComponent","getSongsWithChord","chordName","getAllArtists","getArtistById","search","query","type","q","getPopularSearches","healthCheck","replace","apiService"],"sources":["/Users/chungtran/Programming/guitar-chords/web/src/services/api.ts"],"sourcesContent":["// Use relative URL when frontend and backend are on same domain\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '/api';\n\nexport interface Song {\n  id: number;\n  title: string;\n  artist: {\n    id: number;\n    name: string;\n  };\n  lyrics: string;\n  tempo: number;\n  genre?: string;\n  difficulty: string;\n  chordProgression?: string;\n  key?: string;\n  capo?: number;\n  strummingPattern?: string;\n  duration?: number;\n  playCount: number;\n  chords: Array<{\n    id: number;\n    name: string;\n    positions: number[];\n    fingers: number[];\n    difficulty: string;\n    position: number;\n    line: number;\n  }>;\n}\n\nexport interface Chord {\n  id: number;\n  name: string;\n  positions: number[];\n  fingers: number[];\n  description?: string;\n  difficulty: string;\n  tips: string[];\n}\n\nexport interface SearchResult {\n  type: 'song' | 'chord' | 'artist';\n  id: number;\n  title: string;\n  artist?: string;\n  matchPercentage: number;\n  chords?: string[];\n}\n\nclass ApiService {\n  private async request<T>(endpoint: string, options?: RequestInit): Promise<T> {\n    const url = `${API_BASE_URL}${endpoint}`;\n    \n    try {\n      const response = await fetch(url, {\n        headers: {\n          'Content-Type': 'application/json',\n          ...options?.headers,\n        },\n        ...options,\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text().catch(() => 'Unknown error');\n        throw new Error(`API Error: ${response.status} ${response.statusText} - ${errorText}`);\n      }\n\n      const data = await response.json();\n      if (data === null || data === undefined) {\n        throw new Error('API returned null or undefined data');\n      }\n\n      return data;\n    } catch (error) {\n      console.error(`API request failed for ${endpoint}:`, error);\n      \n      // Return empty data for common endpoints to prevent app crashes\n      if (endpoint.includes('/songs/recent')) {\n        return [] as unknown as T;\n      }\n      if (endpoint.includes('/chords') && endpoint.split('/').length === 2) {\n        return [] as unknown as T;\n      }\n      if (endpoint.includes('/search')) {\n        return [] as unknown as T;\n      }\n      \n      throw error;\n    }\n  }\n\n  // Songs\n  async getRecentSongs(limit = 5): Promise<Song[]> {\n    return this.request(`/songs/recent?limit=${limit}`);\n  }\n\n  async getSongById(id: string): Promise<Song> {\n    return this.request(`/songs/${id}`);\n  }\n\n  async getAllSongs(page = 1, limit = 10, filters?: {\n    genre?: string;\n    difficulty?: string;\n    artistId?: number;\n  }): Promise<{\n    songs: Song[];\n    pagination: {\n      page: number;\n      limit: number;\n      total: number;\n      pages: number;\n    };\n  }> {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      limit: limit.toString(),\n    });\n\n    if (filters?.genre) params.append('genre', filters.genre);\n    if (filters?.difficulty) params.append('difficulty', filters.difficulty);\n    if (filters?.artistId) params.append('artistId', filters.artistId.toString());\n\n    return this.request(`/songs?${params.toString()}`);\n  }\n\n  // Chords\n  async getAllChords(difficulty?: string): Promise<Chord[]> {\n    const params = difficulty ? `?difficulty=${difficulty}` : '';\n    return this.request(`/chords${params}`);\n  }\n\n  async getChordByName(name: string): Promise<Chord> {\n    return this.request(`/chords/${encodeURIComponent(name)}`);\n  }\n\n  async getSongsWithChord(chordName: string, limit = 10): Promise<Array<{\n    id: number;\n    title: string;\n    artist: string;\n    difficulty: string;\n    playCount: number;\n  }>> {\n    return this.request(`/chords/${encodeURIComponent(chordName)}/songs?limit=${limit}`);\n  }\n\n  // Artists\n  async getAllArtists(page = 1, limit = 20): Promise<{\n    artists: Array<{\n      id: number;\n      name: string;\n      bio?: string;\n      imageUrl?: string;\n      songCount: number;\n    }>;\n    pagination: {\n      page: number;\n      limit: number;\n      total: number;\n      pages: number;\n    };\n  }> {\n    return this.request(`/artists?page=${page}&limit=${limit}`);\n  }\n\n  async getArtistById(id: number): Promise<{\n    id: number;\n    name: string;\n    bio?: string;\n    imageUrl?: string;\n    songs: Array<{\n      id: number;\n      title: string;\n      difficulty: string;\n      genre?: string;\n      playCount: number;\n      chords: string[];\n    }>;\n  }> {\n    return this.request(`/artists/${id}`);\n  }\n\n  // Search\n  async search(query: string, type?: 'song' | 'chord' | 'artist'): Promise<SearchResult[]> {\n    const params = new URLSearchParams({ q: query });\n    if (type) params.append('type', type);\n    \n    return this.request(`/search?${params.toString()}`);\n  }\n\n  async getPopularSearches(): Promise<{\n    popularSongs: Array<{\n      type: 'song';\n      id: number;\n      title: string;\n      artist: string;\n      playCount: number;\n      chords: string[];\n    }>;\n    popularChords: Array<{\n      type: 'chord';\n      id: number;\n      name: string;\n      difficulty: string;\n      usageCount: number;\n    }>;\n  }> {\n    return this.request('/search/popular');\n  }\n\n  // Health check\n  async healthCheck(): Promise<{ status: string; timestamp: string }> {\n    const response = await fetch(`${API_BASE_URL.replace('/api', '')}/health`);\n    return response.json();\n  }\n}\n\nexport const apiService = new ApiService();\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}